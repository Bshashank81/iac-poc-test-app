name: Build
on:
  push:
    branches:
      - testing
  # pull_request:
  #   types: [opened, synchronize, reopened, closed]

jobs:
  # checkov-job:
  #   runs-on: ubuntu-latest
  #   name: checkov-action
  #   steps:
  #     - name: Checkout repo
  #       uses: actions/checkout@master

  #     - name: Run Checkov action
  #       id: checkov
  #       uses: bridgecrewio/checkov-action@master
  #       with:
  #         output_format: json # optional: the output format, one of: cli, json, junitxml, github_failed_only, or sarif. Default: sarif
  #         output_file_path: snyk.json
  #         download_external_modules: true
  #         soft_fail: true # optional: do not return an error code if there are failed checks
  #         framework: terraform

  #     - name: Upload Json as artifact
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: snyk-report
  #         path: snyk.json

  # iac-dd-scan:
  #   runs-on: ubuntu-latest
  #   needs: checkov-job
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0

  #     - name: Display downloaded files
  #       run: ls

  #     - name: Download SARIF report artifact
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: snyk-report
  #         path: .

  #     - name: Display downloaded files
  #       run: ls

  #     - name: Use JSON from SARIF
  #       run: |
  #         mkdir -p ./reports
  #         mv results_json.json ./reports/snyk.json

  #     - name: Publish report
  #       id: import-scan
  #       uses: ivanamat/defectdojo-import-scan@v1
  #       with:
  #         token: ${{ secrets.DEFECTDOJO_TOKEN }}
  #         defectdojo_url: ${{ secrets.DEFECTDOJO_URL }}
  #         file: reports/snyk.json
  #         scan_type: Checkov Scan
  #         engagement: ${{ secrets.DEFECTDOJO_ENGAGEMENT_ID }}
  #         push_to_jira: true

  #     - name: Show final response output
  #       run: |
  #         set -e
  #         printf '%s\n' '${{ steps.import-scan.outputs.response }}'

  # kics-scan:
  #   runs-on: ubuntu-latest
  #   steps:
  #     # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
  #     - uses: actions/checkout@v3
  #     # Scan Iac with kics
  #     - name: run kics Scan
  #       uses: checkmarx/kics-github-action@v1.7.0
  #       with:
  #         # scanning 1 directories: "./eks"
  #         path: "eks"
  #         ignore_on_exit: results
  #         output_path: .
  #     # Display the results in json format
  #     - name: display kics results
  #       run: |
  #         cat results.json

  #     - name: Upload Json as artifact
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: kicks-report
  #         path: results.json

  # iac-dd-scan:
  #   runs-on: ubuntu-latest
  #   needs: kics-scan
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0

  #     - name: Display downloaded files
  #       run: ls

  #     - name: Download json report artifact
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: kicks-report
  #         path: .

  #     - name: Display downloaded files
  #       run: ls

  #     - name: Use JSON from SARIF
  #       run: |
  #         mkdir -p ./reports
  #         mv results.json ./reports/results.json

  #     - name: Publish report
  #       id: import-scan
  #       uses: ivanamat/defectdojo-import-scan@v1
  #       with:
  #         token: ${{ secrets.DEFECTDOJO_TOKEN }}
  #         defectdojo_url: ${{ secrets.DEFECTDOJO_URL }}
  #         file: reports/results.json
  #         scan_type: KICS Scan
  #         engagement: ${{ secrets.DEFECTDOJO_ENGAGEMENT_ID }}
  #         push_to_jira: true

  #     - name: Show final response output
  #       run: |
  #         set -e
  #         printf '%s\n' '${{ steps.import-scan.outputs.response }}'

  snyk:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Run Snyk to check configuration files for security issues
        # Snyk can be used to break the build when it detects security issues.
        # In this case we want to upload the issues to GitHub Code Scanning
        continue-on-error: true
        uses: snyk/actions/iac@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          json: true

      - name: Display downloaded files
        run: ls

      - name: Upload Json as artifact
        uses: actions/upload-artifact@v2
        with:
          name: snyk-report
          path: snyk.json

  snyk-dd-scan:
    runs-on: ubuntu-latest
    needs: snyk
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Display downloaded files
        run: ls

      - name: Download json report artifact
        uses: actions/download-artifact@v2
        with:
          name: snyk-report
          path: .

      - name: Display downloaded files
        run: ls

      - name: Use JSON from SARIF
        run: |
          mkdir -p ./reports
          mv snyk.json ./reports/snyk.json

      - name: Publish report
        id: import-scan
        uses: ivanamat/defectdojo-import-scan@v1
        with:
          token: ${{ secrets.DEFECTDOJO_TOKEN }}
          defectdojo_url: ${{ secrets.DEFECTDOJO_URL }}
          file: reports/snyk.json
          scan_type: Snyk Scan
          engagement: ${{ secrets.DEFECTDOJO_ENGAGEMENT_ID }}
          push_to_jira: true

      - name: Show final response output
        run: |
          set -e
          printf '%s\n' '${{ steps.import-scan.outputs.response }}'
